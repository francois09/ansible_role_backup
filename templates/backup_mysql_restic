#!/bin/bash
# Databases backup
set -o pipefail

# Quelques valeurs par défaut
BACKUP_DIR="{{ backup__conf.local_dir }}"
BACKUP_REPO="sftp:{{ backup__conf.restic_host }}:/home/$(hostname -s).$(hostname -d)/mysql"
BACKUP_CONF_FILE="{{ backup__conf.local_conf }}"

# Si un fichier de paramètres existe, alors on le source
[ -e "$BACKUP_CONF_FILE" ] && . "$BACKUP_CONF_FILE"

LOGFILE={{ backup__conf.logfile }}

{% if backup__output_prom|default(False) %}

# Switch prom file
switch_prom_file() {
    rm -f {{ backup__output_prom }}/backup_mysql.prom.old 2>/dev/null
    mv {{ backup__output_prom }}/backup_mysql.prom {{ backup__output_prom }}/backup_mysql.prom.old 2>/dev/null
    mv {{ backup__output_prom }}/backup_mysql.prom.new {{ backup__output_prom }}/backup_mysql.prom
}
{% endif %}

echo "*** Demarrage le :" $(date) " pour " $(uname -n) >>${LOGFILE}

if [ $# -lt 2 ]
then
    tries=5
else
    tries=$2
fi

# Check/create repository
restic -r $BACKUP_REPO -p /root/.restic_repo_password cat config >/dev/null 2>&1 || restic -r $BACKUP_REPO -p /root/.restic_repo_password init >>$LOGFILE
rc=$?
if [ $rc != 0 ]
then
    if [ $tries -gt 0 ]
    then
	echo $0 ALL $(($tries - 1)) | at now + 10 min >>${LOGFILE} 2>&1
    else
	echo "Errors during mysql backup repository check/creation. Check ${LOGFILE} on " $(uname -n)
	tail ${LOGFILE}
{% if backup__output_prom|default(False) %}
        echo "backup_run_status{step=\"mysql\",type=\"setup\",zonename=\"\"} $rc" >> {{ backup__output_prom }}/backup_mysql.prom.new
        switch_prom_file
{% endif %}
        exit $rc
    fi
{% if backup__output_prom|default(False) %}
    echo "backup_run_status{step=\"mysql\",type=\"setup\",zonename=\"\"} $rc" >> {{ backup__output_prom }}/backup_mysql.prom.new
    switch_prom_file
{% endif %}
    exit $rc
{% if backup__output_prom|default(False) %}
 else
    echo "backup_run_status{step=\"mysql\",type=\"setup\",zonename=\"\"} 0" >> {{ backup__output_prom }}/backup_mysql.prom.new
{% endif %}
fi


MYSQLDUMP=/usr/bin/mysqldump
MYSQL=/usr/bin/mysql

if [ $# -lt 1 -o "$1" == "ALL" ]
then
    DATABASES=$($MYSQL --user=root -r -B -e "show databases"|tail -n +2)
else
    DATABASES=$1
fi

for dbase in $DATABASES
do
    [[ "$dbase" =~ .*_schema ]] && continue
    if [ "$dbase" == "mysql" ]
    then
	MYSQLDUMP_CMD="$MYSQLDUMP --opt --events --add-drop-database $dbase"
    else
	MYSQLDUMP_CMD="$MYSQLDUMP --opt --add-drop-database $dbase"
    fi

    $MYSQLDUMP_CMD | restic -r $BACKUP_REPO -p /root/.restic_repo_password backup --stdin-filename ${dbase}.sql --stdin >>$LOGFILE
    rc=$?
    if [ $rc != 0 ]
    then
	if [ $tries -gt 0 ]
	then
	    echo $0 "$dbase" $(($tries - 1)) | at now + 10 min >>${LOGFILE} 2>&1
	else
	    echo "Errors during mysql backup for $dbase. Check ${LOGFILE} on " $(uname -n)
	    tail ${LOGFILE}
{% if backup__output_prom|default(False) %}
            echo "backup_run_status{step=\"mysql\",type=\"base\",zonename=\"$dbase\"} $rc" >> {{ backup__output_prom }}/backup_mysql.prom.new
            switch_prom_file
{% endif %}
            exit $rc
	fi
{% if backup__output_prom|default(False) %}
        echo "backup_run_status{step=\"mysql\",type=\"base\",zonename=\"$dbase\"} $rc" >> {{ backup__output_prom }}/backup_mysql.prom.new
    else
        echo "backup_run_status{step=\"mysql\",type=\"base\",zonename=\"$dbase\"} 0" >> {{ backup__output_prom }}/backup_mysql.prom.new
        echo "backup_last_run{step=\"mysql\",type=\"base\",zonename=\"$dbase\"} $(date -u +%s)" >> {{ backup__output_prom }}/backup_mysql.prom.new
{% endif %}
    fi
done

echo "*** Fin le :" $(date) " pour " $(uname -n) >>${LOGFILE}
echo >>${LOGFILE}
{% if backup__output_prom|default(False) %}

# Switch prom file
switch_prom_file
{% endif %}
