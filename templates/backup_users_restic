#!/bin/bash
# Fais un tgz des zones à sauvegarder

# Quelques valeurs par défaut
BACKUP_DIR="{{ backup__conf.local_dir }}"
BACKUP_REPO="sftp:{{ backup__conf.restic_host }}:/home/$(hostname -s).$(hostname -d)/users"
BACKUP_CONF_FILE="{{ backup__conf.local_conf }}"

# Si un fichier de paramètres existe, alors on le source
[ -e "$BACKUP_CONF_FILE" ] && . "$BACKUP_CONF_FILE"

LOGFILE={{ backup__conf.logfile }}

{% if backup__output_prom|default(False) %}

# Switch prom file
switch_prom_file() {
    rm -f {{ backup__output_prom }}/backup_users.prom.old 2>/dev/null
    mv {{ backup__output_prom }}/backup_users.prom {{ backup__output_prom }}/backup_users.prom.old 2>/dev/null
    mv {{ backup__output_prom }}/backup_users.prom.new {{ backup__output_prom }}/backup_users.prom
}
{% endif %}

echo "*** Demarrage le :" $(date) " pour " $(uname -n) >>${LOGFILE}

if [ $# -lt 2 ]
then
    tries=5
else
    tries=$2
fi

# Check/create repository
restic -r $BACKUP_REPO -p /root/.restic_repo_password cat config >/dev/null 2>&1 || restic -r $BACKUP_REPO -p /root/.restic_repo_password init >>$LOGFILE
rc=$?
if [ $rc != 0 ]
then
    if [ $tries -gt 0 ]
    then
	echo $0 ALL $(($tries - 1)) | at now + 10 min >>${LOGFILE} 2>&1
    else
	echo "Errors during users backup repository check/creation. Check ${LOGFILE} on " $(uname -n)
	tail ${LOGFILE}
{% if backup__output_prom|default(False) %}
        echo "backup_run_status{step=\"users\",type=\"setup\",zonename=\"\"} $rc" >> {{ backup__output_prom }}/backup_users.prom.new
        switch_prom_file
{% endif %}
	exit $rc
    fi
{% if backup__output_prom|default(False) %}
    echo "backup_run_status{step=\"users\",type=\"setup\",zonename=\"\"} $rc" >> {{ backup__output_prom }}/backup_users.prom.new
    switch_prom_file
{% endif %}
    exit $rc
{% if backup__output_prom|default(False) %}
 else
    echo "backup_run_status{step=\"users\",type=\"setup\",zonename=\"\"} 0" >> {{ backup__output_prom }}/backup_users.prom.new
{% endif %}
fi

if [ $# -lt 1 -o "$1" == "ALL" ]
then
    DIR_LIST=$(grep -v 'pvs-backup' /etc/passwd|awk -F':' '{if (($3 >= 1000) && ($3 < 65534)) print $1":"$6;}')
else
    DIR_LIST=$1
fi

for g in ${DIR_LIST}
do
  n=${g/:*/}
  z=${g/*:/}

  # cd $(dirname $z)
  # /bin/tar jhcf ${BACKUP_DIR}/$n.tgz {% for xcl in backup__conf.exclude|default([]) %}--exclude "{{ xcl }}" {% endfor %}--ignore-failed-read --one-file-system ./$(basename $z) 2>>{{ backup__conf.logfile }}

  # Puis sauvegarder ça avec restic
  restic -r $BACKUP_REPO -p /root/.restic_repo_password backup {% for xcl in backup__conf.exclude|default([]) %}--exclude="{{ xcl }}" {% endfor %} --one-file-system $z >>$LOGFILE
  rc=$?
  if [ $rc != 0 ]
  then
      if [ $tries -gt 0 ]
      then
	  echo $0 "$g" $(($tries - 1)) | at now + 10 min >>${LOGFILE} 2>&1
      else
	  echo "Errors during users backup for $g. Check ${LOGFILE} on " $(uname -n)
	  tail ${LOGFILE}
{% if backup__output_prom|default(False) %}
          echo "backup_run_status{step=\"users\",type=\"account\",zonename=\"$n\"} $rc" >> {{ backup__output_prom }}/backup_users.prom.new
          switch_prom_file
{% endif %}
	  exit $rc
      fi
{% if backup__output_prom|default(False) %}
      echo "backup_run_status{step=\"users\",type=\"account\",zonename=\"$n\"} $rc" >> {{ backup__output_prom }}/backup_users.prom.new
      switch_prom_file
{% endif %}
      exit $rc
{% if backup__output_prom|default(False) %}
  else
      echo "backup_run_status{step=\"users\",type=\"account\",zonename=\"$n\"} 0" >> {{ backup__output_prom }}/backup_users.prom.new
      echo "backup_last_run{step=\"users\",type=\"account\",zonename=\"$n\"} $(date -u +%s)" >> {{ backup__output_prom }}/backup_users.prom.new
{% endif %}
  fi
done

echo "*** Fin le :" $(date) " pour " $(uname -n) >>${LOGFILE}
echo >>${LOGFILE}
{% if backup__output_prom|default(False) %}

# Switch prom file
switch_prom_file
{% endif %}
